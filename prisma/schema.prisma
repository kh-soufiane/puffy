generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

//Database for Puffy application
model UserPuffy {
  id    String @id @unique
  email String @unique

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  File    File[]
  Message Message[]
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model File {
  id           String       @id @default(cuid())
  name         String
  uploadStatus UploadStatus @default(PENDING)
  url          String
  key          String
  messages     Message[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  UserPuffy    UserPuffy?   @relation(fields: [userPuffyId], references: [id])
  userPuffyId  String?
}

model Message {
  id   String @id @default(cuid())
  text String @db.Text()

  isUserMessage Boolean
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  UserPuffy     UserPuffy? @relation(fields: [userPuffyId], references: [id])
  userPuffyId   String?
  File          File?      @relation(fields: [fileId], references: [id])
  fileId        String?
}

//Database of kadelec application
model UserApiLimit {
  id        String   @id
  userId    String   @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model UserSubscription {
  id                        String    @id
  userId                    String    @unique
  stripe_customer_id        String?   @unique
  stripe_subscription_id    String?   @unique
  stripe_price_id           String?
  stripe_current_period_end DateTime?
}
